// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED
// AT 2015-03-15 18:15:50.403527103 -0400 EDT USING sqlc VERSION 0.1.5

package humhubdb

import (
	"github.com/shutej/sqlc/sqlc"
	"strings"
)

const Schema = "humhub"

type activity struct {
	ID sqlc.IntField

	TYPE sqlc.NullStringField

	MODULE sqlc.NullStringField

	OBJECT_MODEL sqlc.NullStringField

	OBJECT_ID sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *activity) IsSelectable() {}

func (t *activity) Schema() string {
	return Schema
}

func (t *activity) Name() string {
	return sqlc.Qualified(t.Schema(), "activity")
}

func (t *activity) As(a string) sqlc.Selectable {
	return &activity{

		ID: t.ID,

		TYPE: t.TYPE,

		MODULE: t.MODULE,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *activity) Alias() string {
	return t.alias
}

func (t *activity) MaybeAlias() string {
	if t.alias == "" {
		return "activity"
	} else {
		return t.alias
	}
}

/////

func (t *activity) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) DateField(name string) sqlc.DateField {
	return sqlc.Date(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) IntField(name string) sqlc.IntField {
	return sqlc.Int(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) StringField(name string) sqlc.StringField {
	return sqlc.String(ACTIVITY, strings.ToUpper(name))
}

func (t *activity) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(ACTIVITY, strings.ToUpper(name))
}

/////

func (t *activity) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(ACTIVITY, "ID"),

		sqlc.NullString(ACTIVITY, "TYPE"),

		sqlc.NullString(ACTIVITY, "MODULE"),

		sqlc.NullString(ACTIVITY, "OBJECT_MODEL"),

		sqlc.NullString(ACTIVITY, "OBJECT_ID"),

		sqlc.NullDatetime(ACTIVITY, "CREATED_AT"),

		sqlc.NullInt(ACTIVITY, "CREATED_BY"),

		sqlc.NullDatetime(ACTIVITY, "UPDATED_AT"),

		sqlc.NullInt(ACTIVITY, "UPDATED_BY"),
	}
}

type comment struct {
	ID sqlc.IntField

	MESSAGE sqlc.NullStringField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	SPACE_ID sqlc.NullIntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *comment) IsSelectable() {}

func (t *comment) Schema() string {
	return Schema
}

func (t *comment) Name() string {
	return sqlc.Qualified(t.Schema(), "comment")
}

func (t *comment) As(a string) sqlc.Selectable {
	return &comment{

		ID: t.ID,

		MESSAGE: t.MESSAGE,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		SPACE_ID: t.SPACE_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *comment) Alias() string {
	return t.alias
}

func (t *comment) MaybeAlias() string {
	if t.alias == "" {
		return "comment"
	} else {
		return t.alias
	}
}

/////

func (t *comment) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(COMMENT, strings.ToUpper(name))
}

func (t *comment) DateField(name string) sqlc.DateField {
	return sqlc.Date(COMMENT, strings.ToUpper(name))
}

func (t *comment) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(COMMENT, strings.ToUpper(name))
}

func (t *comment) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(COMMENT, strings.ToUpper(name))
}

func (t *comment) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(COMMENT, strings.ToUpper(name))
}

func (t *comment) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(COMMENT, strings.ToUpper(name))
}

func (t *comment) IntField(name string) sqlc.IntField {
	return sqlc.Int(COMMENT, strings.ToUpper(name))
}

func (t *comment) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(COMMENT, strings.ToUpper(name))
}

func (t *comment) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(COMMENT, strings.ToUpper(name))
}

func (t *comment) StringField(name string) sqlc.StringField {
	return sqlc.String(COMMENT, strings.ToUpper(name))
}

func (t *comment) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(COMMENT, strings.ToUpper(name))
}

/////

func (t *comment) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(COMMENT, "ID"),

		sqlc.NullString(COMMENT, "MESSAGE"),

		sqlc.String(COMMENT, "OBJECT_MODEL"),

		sqlc.Int(COMMENT, "OBJECT_ID"),

		sqlc.NullInt(COMMENT, "SPACE_ID"),

		sqlc.NullDatetime(COMMENT, "CREATED_AT"),

		sqlc.NullInt(COMMENT, "CREATED_BY"),

		sqlc.NullDatetime(COMMENT, "UPDATED_AT"),

		sqlc.NullInt(COMMENT, "UPDATED_BY"),
	}
}

type content struct {
	ID sqlc.IntField

	GUID sqlc.StringField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	VISIBILITY sqlc.NullIntField

	STICKED sqlc.NullIntField

	ARCHIVED sqlc.NullStringField

	SPACE_ID sqlc.NullIntField

	USER_ID sqlc.NullIntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *content) IsSelectable() {}

func (t *content) Schema() string {
	return Schema
}

func (t *content) Name() string {
	return sqlc.Qualified(t.Schema(), "content")
}

func (t *content) As(a string) sqlc.Selectable {
	return &content{

		ID: t.ID,

		GUID: t.GUID,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		VISIBILITY: t.VISIBILITY,

		STICKED: t.STICKED,

		ARCHIVED: t.ARCHIVED,

		SPACE_ID: t.SPACE_ID,

		USER_ID: t.USER_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *content) Alias() string {
	return t.alias
}

func (t *content) MaybeAlias() string {
	if t.alias == "" {
		return "content"
	} else {
		return t.alias
	}
}

/////

func (t *content) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(CONTENT, strings.ToUpper(name))
}

func (t *content) DateField(name string) sqlc.DateField {
	return sqlc.Date(CONTENT, strings.ToUpper(name))
}

func (t *content) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(CONTENT, strings.ToUpper(name))
}

func (t *content) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(CONTENT, strings.ToUpper(name))
}

func (t *content) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(CONTENT, strings.ToUpper(name))
}

func (t *content) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(CONTENT, strings.ToUpper(name))
}

func (t *content) IntField(name string) sqlc.IntField {
	return sqlc.Int(CONTENT, strings.ToUpper(name))
}

func (t *content) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(CONTENT, strings.ToUpper(name))
}

func (t *content) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(CONTENT, strings.ToUpper(name))
}

func (t *content) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(CONTENT, strings.ToUpper(name))
}

func (t *content) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(CONTENT, strings.ToUpper(name))
}

func (t *content) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(CONTENT, strings.ToUpper(name))
}

func (t *content) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(CONTENT, strings.ToUpper(name))
}

func (t *content) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(CONTENT, strings.ToUpper(name))
}

func (t *content) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(CONTENT, strings.ToUpper(name))
}

func (t *content) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(CONTENT, strings.ToUpper(name))
}

func (t *content) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(CONTENT, strings.ToUpper(name))
}

func (t *content) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(CONTENT, strings.ToUpper(name))
}

func (t *content) StringField(name string) sqlc.StringField {
	return sqlc.String(CONTENT, strings.ToUpper(name))
}

func (t *content) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(CONTENT, strings.ToUpper(name))
}

/////

func (t *content) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(CONTENT, "ID"),

		sqlc.String(CONTENT, "GUID"),

		sqlc.String(CONTENT, "OBJECT_MODEL"),

		sqlc.Int(CONTENT, "OBJECT_ID"),

		sqlc.NullInt(CONTENT, "VISIBILITY"),

		sqlc.NullInt(CONTENT, "STICKED"),

		sqlc.NullString(CONTENT, "ARCHIVED"),

		sqlc.NullInt(CONTENT, "SPACE_ID"),

		sqlc.NullInt(CONTENT, "USER_ID"),

		sqlc.NullDatetime(CONTENT, "CREATED_AT"),

		sqlc.NullInt(CONTENT, "CREATED_BY"),

		sqlc.NullDatetime(CONTENT, "UPDATED_AT"),

		sqlc.NullInt(CONTENT, "UPDATED_BY"),
	}
}

type file struct {
	ID sqlc.IntField

	GUID sqlc.NullStringField

	OBJECT_MODEL sqlc.NullStringField

	OBJECT_ID sqlc.NullStringField

	FILE_NAME sqlc.NullStringField

	TITLE sqlc.NullStringField

	MIME_TYPE sqlc.NullStringField

	SIZE sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *file) IsSelectable() {}

func (t *file) Schema() string {
	return Schema
}

func (t *file) Name() string {
	return sqlc.Qualified(t.Schema(), "file")
}

func (t *file) As(a string) sqlc.Selectable {
	return &file{

		ID: t.ID,

		GUID: t.GUID,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		FILE_NAME: t.FILE_NAME,

		TITLE: t.TITLE,

		MIME_TYPE: t.MIME_TYPE,

		SIZE: t.SIZE,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *file) Alias() string {
	return t.alias
}

func (t *file) MaybeAlias() string {
	if t.alias == "" {
		return "file"
	} else {
		return t.alias
	}
}

/////

func (t *file) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(FILE, strings.ToUpper(name))
}

func (t *file) DateField(name string) sqlc.DateField {
	return sqlc.Date(FILE, strings.ToUpper(name))
}

func (t *file) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(FILE, strings.ToUpper(name))
}

func (t *file) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(FILE, strings.ToUpper(name))
}

func (t *file) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(FILE, strings.ToUpper(name))
}

func (t *file) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(FILE, strings.ToUpper(name))
}

func (t *file) IntField(name string) sqlc.IntField {
	return sqlc.Int(FILE, strings.ToUpper(name))
}

func (t *file) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(FILE, strings.ToUpper(name))
}

func (t *file) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(FILE, strings.ToUpper(name))
}

func (t *file) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(FILE, strings.ToUpper(name))
}

func (t *file) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(FILE, strings.ToUpper(name))
}

func (t *file) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(FILE, strings.ToUpper(name))
}

func (t *file) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(FILE, strings.ToUpper(name))
}

func (t *file) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(FILE, strings.ToUpper(name))
}

func (t *file) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(FILE, strings.ToUpper(name))
}

func (t *file) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(FILE, strings.ToUpper(name))
}

func (t *file) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(FILE, strings.ToUpper(name))
}

func (t *file) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(FILE, strings.ToUpper(name))
}

func (t *file) StringField(name string) sqlc.StringField {
	return sqlc.String(FILE, strings.ToUpper(name))
}

func (t *file) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(FILE, strings.ToUpper(name))
}

/////

func (t *file) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(FILE, "ID"),

		sqlc.NullString(FILE, "GUID"),

		sqlc.NullString(FILE, "OBJECT_MODEL"),

		sqlc.NullString(FILE, "OBJECT_ID"),

		sqlc.NullString(FILE, "FILE_NAME"),

		sqlc.NullString(FILE, "TITLE"),

		sqlc.NullString(FILE, "MIME_TYPE"),

		sqlc.NullString(FILE, "SIZE"),

		sqlc.NullDatetime(FILE, "CREATED_AT"),

		sqlc.NullInt(FILE, "CREATED_BY"),

		sqlc.NullDatetime(FILE, "UPDATED_AT"),

		sqlc.NullInt(FILE, "UPDATED_BY"),
	}
}

type group struct {
	ID sqlc.IntField

	SPACE_ID sqlc.NullIntField

	NAME sqlc.NullStringField

	DESCRIPTION sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	LDAP_DN sqlc.NullStringField

	CAN_CREATE_PUBLIC_SPACES sqlc.NullIntField

	CAN_CREATE_PRIVATE_SPACES sqlc.NullIntField

	alias string
}

func (t *group) IsSelectable() {}

func (t *group) Schema() string {
	return Schema
}

func (t *group) Name() string {
	return sqlc.Qualified(t.Schema(), "group")
}

func (t *group) As(a string) sqlc.Selectable {
	return &group{

		ID: t.ID,

		SPACE_ID: t.SPACE_ID,

		NAME: t.NAME,

		DESCRIPTION: t.DESCRIPTION,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		LDAP_DN: t.LDAP_DN,

		CAN_CREATE_PUBLIC_SPACES: t.CAN_CREATE_PUBLIC_SPACES,

		CAN_CREATE_PRIVATE_SPACES: t.CAN_CREATE_PRIVATE_SPACES,

		alias: a,
	}
}

func (t *group) Alias() string {
	return t.alias
}

func (t *group) MaybeAlias() string {
	if t.alias == "" {
		return "group"
	} else {
		return t.alias
	}
}

/////

func (t *group) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(GROUP, strings.ToUpper(name))
}

func (t *group) DateField(name string) sqlc.DateField {
	return sqlc.Date(GROUP, strings.ToUpper(name))
}

func (t *group) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(GROUP, strings.ToUpper(name))
}

func (t *group) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(GROUP, strings.ToUpper(name))
}

func (t *group) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(GROUP, strings.ToUpper(name))
}

func (t *group) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(GROUP, strings.ToUpper(name))
}

func (t *group) IntField(name string) sqlc.IntField {
	return sqlc.Int(GROUP, strings.ToUpper(name))
}

func (t *group) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(GROUP, strings.ToUpper(name))
}

func (t *group) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(GROUP, strings.ToUpper(name))
}

func (t *group) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(GROUP, strings.ToUpper(name))
}

func (t *group) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(GROUP, strings.ToUpper(name))
}

func (t *group) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(GROUP, strings.ToUpper(name))
}

func (t *group) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(GROUP, strings.ToUpper(name))
}

func (t *group) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(GROUP, strings.ToUpper(name))
}

func (t *group) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(GROUP, strings.ToUpper(name))
}

func (t *group) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(GROUP, strings.ToUpper(name))
}

func (t *group) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(GROUP, strings.ToUpper(name))
}

func (t *group) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(GROUP, strings.ToUpper(name))
}

func (t *group) StringField(name string) sqlc.StringField {
	return sqlc.String(GROUP, strings.ToUpper(name))
}

func (t *group) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(GROUP, strings.ToUpper(name))
}

/////

func (t *group) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(GROUP, "ID"),

		sqlc.NullInt(GROUP, "SPACE_ID"),

		sqlc.NullString(GROUP, "NAME"),

		sqlc.NullString(GROUP, "DESCRIPTION"),

		sqlc.NullDatetime(GROUP, "CREATED_AT"),

		sqlc.NullInt(GROUP, "CREATED_BY"),

		sqlc.NullDatetime(GROUP, "UPDATED_AT"),

		sqlc.NullInt(GROUP, "UPDATED_BY"),

		sqlc.NullString(GROUP, "LDAP_DN"),

		sqlc.NullInt(GROUP, "CAN_CREATE_PUBLIC_SPACES"),

		sqlc.NullInt(GROUP, "CAN_CREATE_PRIVATE_SPACES"),
	}
}

type group_admin struct {
	ID sqlc.IntField

	USER_ID sqlc.IntField

	GROUP_ID sqlc.IntField

	CREATED_AT sqlc.DatetimeField

	CREATED_BY sqlc.IntField

	UPDATED_AT sqlc.DatetimeField

	UPDATED_BY sqlc.IntField

	alias string
}

func (t *group_admin) IsSelectable() {}

func (t *group_admin) Schema() string {
	return Schema
}

func (t *group_admin) Name() string {
	return sqlc.Qualified(t.Schema(), "group_admin")
}

func (t *group_admin) As(a string) sqlc.Selectable {
	return &group_admin{

		ID: t.ID,

		USER_ID: t.USER_ID,

		GROUP_ID: t.GROUP_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *group_admin) Alias() string {
	return t.alias
}

func (t *group_admin) MaybeAlias() string {
	if t.alias == "" {
		return "group_admin"
	} else {
		return t.alias
	}
}

/////

func (t *group_admin) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) DateField(name string) sqlc.DateField {
	return sqlc.Date(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) IntField(name string) sqlc.IntField {
	return sqlc.Int(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) StringField(name string) sqlc.StringField {
	return sqlc.String(GROUP_ADMIN, strings.ToUpper(name))
}

func (t *group_admin) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(GROUP_ADMIN, strings.ToUpper(name))
}

/////

func (t *group_admin) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(GROUP_ADMIN, "ID"),

		sqlc.Int(GROUP_ADMIN, "USER_ID"),

		sqlc.Int(GROUP_ADMIN, "GROUP_ID"),

		sqlc.Datetime(GROUP_ADMIN, "CREATED_AT"),

		sqlc.Int(GROUP_ADMIN, "CREATED_BY"),

		sqlc.Datetime(GROUP_ADMIN, "UPDATED_AT"),

		sqlc.Int(GROUP_ADMIN, "UPDATED_BY"),
	}
}

type like struct {
	ID sqlc.IntField

	TARGET_USER_ID sqlc.NullIntField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *like) IsSelectable() {}

func (t *like) Schema() string {
	return Schema
}

func (t *like) Name() string {
	return sqlc.Qualified(t.Schema(), "like")
}

func (t *like) As(a string) sqlc.Selectable {
	return &like{

		ID: t.ID,

		TARGET_USER_ID: t.TARGET_USER_ID,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *like) Alias() string {
	return t.alias
}

func (t *like) MaybeAlias() string {
	if t.alias == "" {
		return "like"
	} else {
		return t.alias
	}
}

/////

func (t *like) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(LIKE, strings.ToUpper(name))
}

func (t *like) DateField(name string) sqlc.DateField {
	return sqlc.Date(LIKE, strings.ToUpper(name))
}

func (t *like) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(LIKE, strings.ToUpper(name))
}

func (t *like) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(LIKE, strings.ToUpper(name))
}

func (t *like) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(LIKE, strings.ToUpper(name))
}

func (t *like) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(LIKE, strings.ToUpper(name))
}

func (t *like) IntField(name string) sqlc.IntField {
	return sqlc.Int(LIKE, strings.ToUpper(name))
}

func (t *like) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(LIKE, strings.ToUpper(name))
}

func (t *like) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(LIKE, strings.ToUpper(name))
}

func (t *like) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(LIKE, strings.ToUpper(name))
}

func (t *like) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(LIKE, strings.ToUpper(name))
}

func (t *like) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(LIKE, strings.ToUpper(name))
}

func (t *like) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(LIKE, strings.ToUpper(name))
}

func (t *like) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(LIKE, strings.ToUpper(name))
}

func (t *like) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(LIKE, strings.ToUpper(name))
}

func (t *like) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(LIKE, strings.ToUpper(name))
}

func (t *like) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(LIKE, strings.ToUpper(name))
}

func (t *like) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(LIKE, strings.ToUpper(name))
}

func (t *like) StringField(name string) sqlc.StringField {
	return sqlc.String(LIKE, strings.ToUpper(name))
}

func (t *like) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(LIKE, strings.ToUpper(name))
}

/////

func (t *like) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(LIKE, "ID"),

		sqlc.NullInt(LIKE, "TARGET_USER_ID"),

		sqlc.String(LIKE, "OBJECT_MODEL"),

		sqlc.Int(LIKE, "OBJECT_ID"),

		sqlc.NullDatetime(LIKE, "CREATED_AT"),

		sqlc.NullInt(LIKE, "CREATED_BY"),

		sqlc.NullDatetime(LIKE, "UPDATED_AT"),

		sqlc.NullInt(LIKE, "UPDATED_BY"),
	}
}

type logging struct {
	ID sqlc.IntField

	LEVEL sqlc.NullStringField

	CATEGORY sqlc.NullStringField

	LOGTIME sqlc.NullIntField

	MESSAGE sqlc.NullStringField

	alias string
}

func (t *logging) IsSelectable() {}

func (t *logging) Schema() string {
	return Schema
}

func (t *logging) Name() string {
	return sqlc.Qualified(t.Schema(), "logging")
}

func (t *logging) As(a string) sqlc.Selectable {
	return &logging{

		ID: t.ID,

		LEVEL: t.LEVEL,

		CATEGORY: t.CATEGORY,

		LOGTIME: t.LOGTIME,

		MESSAGE: t.MESSAGE,

		alias: a,
	}
}

func (t *logging) Alias() string {
	return t.alias
}

func (t *logging) MaybeAlias() string {
	if t.alias == "" {
		return "logging"
	} else {
		return t.alias
	}
}

/////

func (t *logging) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(LOGGING, strings.ToUpper(name))
}

func (t *logging) DateField(name string) sqlc.DateField {
	return sqlc.Date(LOGGING, strings.ToUpper(name))
}

func (t *logging) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(LOGGING, strings.ToUpper(name))
}

func (t *logging) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(LOGGING, strings.ToUpper(name))
}

func (t *logging) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(LOGGING, strings.ToUpper(name))
}

func (t *logging) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(LOGGING, strings.ToUpper(name))
}

func (t *logging) IntField(name string) sqlc.IntField {
	return sqlc.Int(LOGGING, strings.ToUpper(name))
}

func (t *logging) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(LOGGING, strings.ToUpper(name))
}

func (t *logging) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(LOGGING, strings.ToUpper(name))
}

func (t *logging) StringField(name string) sqlc.StringField {
	return sqlc.String(LOGGING, strings.ToUpper(name))
}

func (t *logging) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(LOGGING, strings.ToUpper(name))
}

/////

func (t *logging) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(LOGGING, "ID"),

		sqlc.NullString(LOGGING, "LEVEL"),

		sqlc.NullString(LOGGING, "CATEGORY"),

		sqlc.NullInt(LOGGING, "LOGTIME"),

		sqlc.NullString(LOGGING, "MESSAGE"),
	}
}

type migration struct {
	VERSION sqlc.StringField

	APPLY_TIME sqlc.NullIntField

	MODULE sqlc.NullStringField

	alias string
}

func (t *migration) IsSelectable() {}

func (t *migration) Schema() string {
	return Schema
}

func (t *migration) Name() string {
	return sqlc.Qualified(t.Schema(), "migration")
}

func (t *migration) As(a string) sqlc.Selectable {
	return &migration{

		VERSION: t.VERSION,

		APPLY_TIME: t.APPLY_TIME,

		MODULE: t.MODULE,

		alias: a,
	}
}

func (t *migration) Alias() string {
	return t.alias
}

func (t *migration) MaybeAlias() string {
	if t.alias == "" {
		return "migration"
	} else {
		return t.alias
	}
}

/////

func (t *migration) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(MIGRATION, strings.ToUpper(name))
}

func (t *migration) DateField(name string) sqlc.DateField {
	return sqlc.Date(MIGRATION, strings.ToUpper(name))
}

func (t *migration) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(MIGRATION, strings.ToUpper(name))
}

func (t *migration) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(MIGRATION, strings.ToUpper(name))
}

func (t *migration) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(MIGRATION, strings.ToUpper(name))
}

func (t *migration) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(MIGRATION, strings.ToUpper(name))
}

func (t *migration) IntField(name string) sqlc.IntField {
	return sqlc.Int(MIGRATION, strings.ToUpper(name))
}

func (t *migration) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(MIGRATION, strings.ToUpper(name))
}

func (t *migration) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(MIGRATION, strings.ToUpper(name))
}

func (t *migration) StringField(name string) sqlc.StringField {
	return sqlc.String(MIGRATION, strings.ToUpper(name))
}

func (t *migration) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(MIGRATION, strings.ToUpper(name))
}

/////

func (t *migration) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.String(MIGRATION, "VERSION"),

		sqlc.NullInt(MIGRATION, "APPLY_TIME"),

		sqlc.NullString(MIGRATION, "MODULE"),
	}
}

type module_enabled struct {
	MODULE_ID sqlc.StringField

	alias string
}

func (t *module_enabled) IsSelectable() {}

func (t *module_enabled) Schema() string {
	return Schema
}

func (t *module_enabled) Name() string {
	return sqlc.Qualified(t.Schema(), "module_enabled")
}

func (t *module_enabled) As(a string) sqlc.Selectable {
	return &module_enabled{

		MODULE_ID: t.MODULE_ID,

		alias: a,
	}
}

func (t *module_enabled) Alias() string {
	return t.alias
}

func (t *module_enabled) MaybeAlias() string {
	if t.alias == "" {
		return "module_enabled"
	} else {
		return t.alias
	}
}

/////

func (t *module_enabled) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) DateField(name string) sqlc.DateField {
	return sqlc.Date(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) IntField(name string) sqlc.IntField {
	return sqlc.Int(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) StringField(name string) sqlc.StringField {
	return sqlc.String(MODULE_ENABLED, strings.ToUpper(name))
}

func (t *module_enabled) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(MODULE_ENABLED, strings.ToUpper(name))
}

/////

func (t *module_enabled) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.String(MODULE_ENABLED, "MODULE_ID"),
	}
}

type notification struct {
	ID sqlc.IntField

	CLASS sqlc.StringField

	USER_ID sqlc.IntField

	SEEN sqlc.NullIntField

	SOURCE_OBJECT_MODEL sqlc.NullStringField

	SOURCE_OBJECT_ID sqlc.NullIntField

	TARGET_OBJECT_MODEL sqlc.NullStringField

	TARGET_OBJECT_ID sqlc.NullIntField

	SPACE_ID sqlc.NullIntField

	EMAILED sqlc.IntField

	CREATED_AT sqlc.DatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.DatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *notification) IsSelectable() {}

func (t *notification) Schema() string {
	return Schema
}

func (t *notification) Name() string {
	return sqlc.Qualified(t.Schema(), "notification")
}

func (t *notification) As(a string) sqlc.Selectable {
	return &notification{

		ID: t.ID,

		CLASS: t.CLASS,

		USER_ID: t.USER_ID,

		SEEN: t.SEEN,

		SOURCE_OBJECT_MODEL: t.SOURCE_OBJECT_MODEL,

		SOURCE_OBJECT_ID: t.SOURCE_OBJECT_ID,

		TARGET_OBJECT_MODEL: t.TARGET_OBJECT_MODEL,

		TARGET_OBJECT_ID: t.TARGET_OBJECT_ID,

		SPACE_ID: t.SPACE_ID,

		EMAILED: t.EMAILED,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *notification) Alias() string {
	return t.alias
}

func (t *notification) MaybeAlias() string {
	if t.alias == "" {
		return "notification"
	} else {
		return t.alias
	}
}

/////

func (t *notification) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) DateField(name string) sqlc.DateField {
	return sqlc.Date(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) IntField(name string) sqlc.IntField {
	return sqlc.Int(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) StringField(name string) sqlc.StringField {
	return sqlc.String(NOTIFICATION, strings.ToUpper(name))
}

func (t *notification) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(NOTIFICATION, strings.ToUpper(name))
}

/////

func (t *notification) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(NOTIFICATION, "ID"),

		sqlc.String(NOTIFICATION, "CLASS"),

		sqlc.Int(NOTIFICATION, "USER_ID"),

		sqlc.NullInt(NOTIFICATION, "SEEN"),

		sqlc.NullString(NOTIFICATION, "SOURCE_OBJECT_MODEL"),

		sqlc.NullInt(NOTIFICATION, "SOURCE_OBJECT_ID"),

		sqlc.NullString(NOTIFICATION, "TARGET_OBJECT_MODEL"),

		sqlc.NullInt(NOTIFICATION, "TARGET_OBJECT_ID"),

		sqlc.NullInt(NOTIFICATION, "SPACE_ID"),

		sqlc.Int(NOTIFICATION, "EMAILED"),

		sqlc.Datetime(NOTIFICATION, "CREATED_AT"),

		sqlc.NullInt(NOTIFICATION, "CREATED_BY"),

		sqlc.Datetime(NOTIFICATION, "UPDATED_AT"),

		sqlc.NullInt(NOTIFICATION, "UPDATED_BY"),
	}
}

type post struct {
	ID sqlc.IntField

	MESSAGE_2TRASH sqlc.NullStringField

	MESSAGE sqlc.NullStringField

	URL sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *post) IsSelectable() {}

func (t *post) Schema() string {
	return Schema
}

func (t *post) Name() string {
	return sqlc.Qualified(t.Schema(), "post")
}

func (t *post) As(a string) sqlc.Selectable {
	return &post{

		ID: t.ID,

		MESSAGE_2TRASH: t.MESSAGE_2TRASH,

		MESSAGE: t.MESSAGE,

		URL: t.URL,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *post) Alias() string {
	return t.alias
}

func (t *post) MaybeAlias() string {
	if t.alias == "" {
		return "post"
	} else {
		return t.alias
	}
}

/////

func (t *post) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(POST, strings.ToUpper(name))
}

func (t *post) DateField(name string) sqlc.DateField {
	return sqlc.Date(POST, strings.ToUpper(name))
}

func (t *post) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(POST, strings.ToUpper(name))
}

func (t *post) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(POST, strings.ToUpper(name))
}

func (t *post) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(POST, strings.ToUpper(name))
}

func (t *post) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(POST, strings.ToUpper(name))
}

func (t *post) IntField(name string) sqlc.IntField {
	return sqlc.Int(POST, strings.ToUpper(name))
}

func (t *post) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(POST, strings.ToUpper(name))
}

func (t *post) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(POST, strings.ToUpper(name))
}

func (t *post) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(POST, strings.ToUpper(name))
}

func (t *post) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(POST, strings.ToUpper(name))
}

func (t *post) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(POST, strings.ToUpper(name))
}

func (t *post) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(POST, strings.ToUpper(name))
}

func (t *post) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(POST, strings.ToUpper(name))
}

func (t *post) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(POST, strings.ToUpper(name))
}

func (t *post) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(POST, strings.ToUpper(name))
}

func (t *post) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(POST, strings.ToUpper(name))
}

func (t *post) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(POST, strings.ToUpper(name))
}

func (t *post) StringField(name string) sqlc.StringField {
	return sqlc.String(POST, strings.ToUpper(name))
}

func (t *post) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(POST, strings.ToUpper(name))
}

/////

func (t *post) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(POST, "ID"),

		sqlc.NullString(POST, "MESSAGE_2TRASH"),

		sqlc.NullString(POST, "MESSAGE"),

		sqlc.NullString(POST, "URL"),

		sqlc.NullDatetime(POST, "CREATED_AT"),

		sqlc.NullInt(POST, "CREATED_BY"),

		sqlc.NullDatetime(POST, "UPDATED_AT"),

		sqlc.NullInt(POST, "UPDATED_BY"),
	}
}

type profile struct {
	USER_ID sqlc.IntField

	FIRSTNAME sqlc.NullStringField

	LASTNAME sqlc.NullStringField

	TITLE sqlc.NullStringField

	GENDER sqlc.NullStringField

	STREET sqlc.NullStringField

	ZIP sqlc.NullStringField

	CITY sqlc.NullStringField

	COUNTRY sqlc.NullStringField

	STATE sqlc.NullStringField

	BIRTHDAY_HIDE_YEAR sqlc.NullIntField

	BIRTHDAY sqlc.NullDatetimeField

	ABOUT sqlc.NullStringField

	PHONE_PRIVATE sqlc.NullStringField

	PHONE_WORK sqlc.NullStringField

	MOBILE sqlc.NullStringField

	FAX sqlc.NullStringField

	IM_SKYPE sqlc.NullStringField

	IM_MSN sqlc.NullStringField

	IM_ICQ sqlc.NullIntField

	IM_XMPP sqlc.NullStringField

	URL sqlc.NullStringField

	URL_FACEBOOK sqlc.NullStringField

	URL_LINKEDIN sqlc.NullStringField

	URL_XING sqlc.NullStringField

	URL_YOUTUBE sqlc.NullStringField

	URL_VIMEO sqlc.NullStringField

	URL_FLICKR sqlc.NullStringField

	URL_MYSPACE sqlc.NullStringField

	URL_GOOGLEPLUS sqlc.NullStringField

	URL_TWITTER sqlc.NullStringField

	alias string
}

func (t *profile) IsSelectable() {}

func (t *profile) Schema() string {
	return Schema
}

func (t *profile) Name() string {
	return sqlc.Qualified(t.Schema(), "profile")
}

func (t *profile) As(a string) sqlc.Selectable {
	return &profile{

		USER_ID: t.USER_ID,

		FIRSTNAME: t.FIRSTNAME,

		LASTNAME: t.LASTNAME,

		TITLE: t.TITLE,

		GENDER: t.GENDER,

		STREET: t.STREET,

		ZIP: t.ZIP,

		CITY: t.CITY,

		COUNTRY: t.COUNTRY,

		STATE: t.STATE,

		BIRTHDAY_HIDE_YEAR: t.BIRTHDAY_HIDE_YEAR,

		BIRTHDAY: t.BIRTHDAY,

		ABOUT: t.ABOUT,

		PHONE_PRIVATE: t.PHONE_PRIVATE,

		PHONE_WORK: t.PHONE_WORK,

		MOBILE: t.MOBILE,

		FAX: t.FAX,

		IM_SKYPE: t.IM_SKYPE,

		IM_MSN: t.IM_MSN,

		IM_ICQ: t.IM_ICQ,

		IM_XMPP: t.IM_XMPP,

		URL: t.URL,

		URL_FACEBOOK: t.URL_FACEBOOK,

		URL_LINKEDIN: t.URL_LINKEDIN,

		URL_XING: t.URL_XING,

		URL_YOUTUBE: t.URL_YOUTUBE,

		URL_VIMEO: t.URL_VIMEO,

		URL_FLICKR: t.URL_FLICKR,

		URL_MYSPACE: t.URL_MYSPACE,

		URL_GOOGLEPLUS: t.URL_GOOGLEPLUS,

		URL_TWITTER: t.URL_TWITTER,

		alias: a,
	}
}

func (t *profile) Alias() string {
	return t.alias
}

func (t *profile) MaybeAlias() string {
	if t.alias == "" {
		return "profile"
	} else {
		return t.alias
	}
}

/////

func (t *profile) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(PROFILE, strings.ToUpper(name))
}

func (t *profile) DateField(name string) sqlc.DateField {
	return sqlc.Date(PROFILE, strings.ToUpper(name))
}

func (t *profile) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(PROFILE, strings.ToUpper(name))
}

func (t *profile) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(PROFILE, strings.ToUpper(name))
}

func (t *profile) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(PROFILE, strings.ToUpper(name))
}

func (t *profile) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(PROFILE, strings.ToUpper(name))
}

func (t *profile) IntField(name string) sqlc.IntField {
	return sqlc.Int(PROFILE, strings.ToUpper(name))
}

func (t *profile) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(PROFILE, strings.ToUpper(name))
}

func (t *profile) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(PROFILE, strings.ToUpper(name))
}

func (t *profile) StringField(name string) sqlc.StringField {
	return sqlc.String(PROFILE, strings.ToUpper(name))
}

func (t *profile) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(PROFILE, strings.ToUpper(name))
}

/////

func (t *profile) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(PROFILE, "USER_ID"),

		sqlc.NullString(PROFILE, "FIRSTNAME"),

		sqlc.NullString(PROFILE, "LASTNAME"),

		sqlc.NullString(PROFILE, "TITLE"),

		sqlc.NullString(PROFILE, "GENDER"),

		sqlc.NullString(PROFILE, "STREET"),

		sqlc.NullString(PROFILE, "ZIP"),

		sqlc.NullString(PROFILE, "CITY"),

		sqlc.NullString(PROFILE, "COUNTRY"),

		sqlc.NullString(PROFILE, "STATE"),

		sqlc.NullInt(PROFILE, "BIRTHDAY_HIDE_YEAR"),

		sqlc.NullDatetime(PROFILE, "BIRTHDAY"),

		sqlc.NullString(PROFILE, "ABOUT"),

		sqlc.NullString(PROFILE, "PHONE_PRIVATE"),

		sqlc.NullString(PROFILE, "PHONE_WORK"),

		sqlc.NullString(PROFILE, "MOBILE"),

		sqlc.NullString(PROFILE, "FAX"),

		sqlc.NullString(PROFILE, "IM_SKYPE"),

		sqlc.NullString(PROFILE, "IM_MSN"),

		sqlc.NullInt(PROFILE, "IM_ICQ"),

		sqlc.NullString(PROFILE, "IM_XMPP"),

		sqlc.NullString(PROFILE, "URL"),

		sqlc.NullString(PROFILE, "URL_FACEBOOK"),

		sqlc.NullString(PROFILE, "URL_LINKEDIN"),

		sqlc.NullString(PROFILE, "URL_XING"),

		sqlc.NullString(PROFILE, "URL_YOUTUBE"),

		sqlc.NullString(PROFILE, "URL_VIMEO"),

		sqlc.NullString(PROFILE, "URL_FLICKR"),

		sqlc.NullString(PROFILE, "URL_MYSPACE"),

		sqlc.NullString(PROFILE, "URL_GOOGLEPLUS"),

		sqlc.NullString(PROFILE, "URL_TWITTER"),
	}
}

type profile_field struct {
	ID sqlc.IntField

	PROFILE_FIELD_CATEGORY_ID sqlc.IntField

	MODULE_ID sqlc.NullStringField

	FIELD_TYPE_CLASS sqlc.StringField

	FIELD_TYPE_CONFIG sqlc.NullStringField

	INTERNAL_NAME sqlc.StringField

	TITLE sqlc.StringField

	DESCRIPTION sqlc.NullStringField

	SORT_ORDER sqlc.IntField

	REQUIRED sqlc.NullIntField

	SHOW_AT_REGISTRATION sqlc.NullIntField

	EDITABLE sqlc.IntField

	VISIBLE sqlc.IntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	LDAP_ATTRIBUTE sqlc.NullStringField

	TRANSLATION_CATEGORY sqlc.NullStringField

	IS_SYSTEM sqlc.NullIntField

	alias string
}

func (t *profile_field) IsSelectable() {}

func (t *profile_field) Schema() string {
	return Schema
}

func (t *profile_field) Name() string {
	return sqlc.Qualified(t.Schema(), "profile_field")
}

func (t *profile_field) As(a string) sqlc.Selectable {
	return &profile_field{

		ID: t.ID,

		PROFILE_FIELD_CATEGORY_ID: t.PROFILE_FIELD_CATEGORY_ID,

		MODULE_ID: t.MODULE_ID,

		FIELD_TYPE_CLASS: t.FIELD_TYPE_CLASS,

		FIELD_TYPE_CONFIG: t.FIELD_TYPE_CONFIG,

		INTERNAL_NAME: t.INTERNAL_NAME,

		TITLE: t.TITLE,

		DESCRIPTION: t.DESCRIPTION,

		SORT_ORDER: t.SORT_ORDER,

		REQUIRED: t.REQUIRED,

		SHOW_AT_REGISTRATION: t.SHOW_AT_REGISTRATION,

		EDITABLE: t.EDITABLE,

		VISIBLE: t.VISIBLE,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		LDAP_ATTRIBUTE: t.LDAP_ATTRIBUTE,

		TRANSLATION_CATEGORY: t.TRANSLATION_CATEGORY,

		IS_SYSTEM: t.IS_SYSTEM,

		alias: a,
	}
}

func (t *profile_field) Alias() string {
	return t.alias
}

func (t *profile_field) MaybeAlias() string {
	if t.alias == "" {
		return "profile_field"
	} else {
		return t.alias
	}
}

/////

func (t *profile_field) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) DateField(name string) sqlc.DateField {
	return sqlc.Date(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) IntField(name string) sqlc.IntField {
	return sqlc.Int(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) StringField(name string) sqlc.StringField {
	return sqlc.String(PROFILE_FIELD, strings.ToUpper(name))
}

func (t *profile_field) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(PROFILE_FIELD, strings.ToUpper(name))
}

/////

func (t *profile_field) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(PROFILE_FIELD, "ID"),

		sqlc.Int(PROFILE_FIELD, "PROFILE_FIELD_CATEGORY_ID"),

		sqlc.NullString(PROFILE_FIELD, "MODULE_ID"),

		sqlc.String(PROFILE_FIELD, "FIELD_TYPE_CLASS"),

		sqlc.NullString(PROFILE_FIELD, "FIELD_TYPE_CONFIG"),

		sqlc.String(PROFILE_FIELD, "INTERNAL_NAME"),

		sqlc.String(PROFILE_FIELD, "TITLE"),

		sqlc.NullString(PROFILE_FIELD, "DESCRIPTION"),

		sqlc.Int(PROFILE_FIELD, "SORT_ORDER"),

		sqlc.NullInt(PROFILE_FIELD, "REQUIRED"),

		sqlc.NullInt(PROFILE_FIELD, "SHOW_AT_REGISTRATION"),

		sqlc.Int(PROFILE_FIELD, "EDITABLE"),

		sqlc.Int(PROFILE_FIELD, "VISIBLE"),

		sqlc.NullDatetime(PROFILE_FIELD, "CREATED_AT"),

		sqlc.NullInt(PROFILE_FIELD, "CREATED_BY"),

		sqlc.NullDatetime(PROFILE_FIELD, "UPDATED_AT"),

		sqlc.NullInt(PROFILE_FIELD, "UPDATED_BY"),

		sqlc.NullString(PROFILE_FIELD, "LDAP_ATTRIBUTE"),

		sqlc.NullString(PROFILE_FIELD, "TRANSLATION_CATEGORY"),

		sqlc.NullInt(PROFILE_FIELD, "IS_SYSTEM"),
	}
}

type profile_field_category struct {
	ID sqlc.IntField

	TITLE sqlc.StringField

	DESCRIPTION sqlc.StringField

	SORT_ORDER sqlc.IntField

	MODULE_ID sqlc.NullIntField

	VISIBILITY sqlc.IntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	TRANSLATION_CATEGORY sqlc.NullStringField

	IS_SYSTEM sqlc.NullIntField

	alias string
}

func (t *profile_field_category) IsSelectable() {}

func (t *profile_field_category) Schema() string {
	return Schema
}

func (t *profile_field_category) Name() string {
	return sqlc.Qualified(t.Schema(), "profile_field_category")
}

func (t *profile_field_category) As(a string) sqlc.Selectable {
	return &profile_field_category{

		ID: t.ID,

		TITLE: t.TITLE,

		DESCRIPTION: t.DESCRIPTION,

		SORT_ORDER: t.SORT_ORDER,

		MODULE_ID: t.MODULE_ID,

		VISIBILITY: t.VISIBILITY,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		TRANSLATION_CATEGORY: t.TRANSLATION_CATEGORY,

		IS_SYSTEM: t.IS_SYSTEM,

		alias: a,
	}
}

func (t *profile_field_category) Alias() string {
	return t.alias
}

func (t *profile_field_category) MaybeAlias() string {
	if t.alias == "" {
		return "profile_field_category"
	} else {
		return t.alias
	}
}

/////

func (t *profile_field_category) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) DateField(name string) sqlc.DateField {
	return sqlc.Date(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) IntField(name string) sqlc.IntField {
	return sqlc.Int(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) StringField(name string) sqlc.StringField {
	return sqlc.String(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

func (t *profile_field_category) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(PROFILE_FIELD_CATEGORY, strings.ToUpper(name))
}

/////

func (t *profile_field_category) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(PROFILE_FIELD_CATEGORY, "ID"),

		sqlc.String(PROFILE_FIELD_CATEGORY, "TITLE"),

		sqlc.String(PROFILE_FIELD_CATEGORY, "DESCRIPTION"),

		sqlc.Int(PROFILE_FIELD_CATEGORY, "SORT_ORDER"),

		sqlc.NullInt(PROFILE_FIELD_CATEGORY, "MODULE_ID"),

		sqlc.Int(PROFILE_FIELD_CATEGORY, "VISIBILITY"),

		sqlc.NullDatetime(PROFILE_FIELD_CATEGORY, "CREATED_AT"),

		sqlc.NullInt(PROFILE_FIELD_CATEGORY, "CREATED_BY"),

		sqlc.NullDatetime(PROFILE_FIELD_CATEGORY, "UPDATED_AT"),

		sqlc.NullInt(PROFILE_FIELD_CATEGORY, "UPDATED_BY"),

		sqlc.NullString(PROFILE_FIELD_CATEGORY, "TRANSLATION_CATEGORY"),

		sqlc.NullInt(PROFILE_FIELD_CATEGORY, "IS_SYSTEM"),
	}
}

type setting struct {
	ID sqlc.IntField

	NAME sqlc.StringField

	VALUE sqlc.NullStringField

	VALUE_TEXT sqlc.NullStringField

	MODULE_ID sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *setting) IsSelectable() {}

func (t *setting) Schema() string {
	return Schema
}

func (t *setting) Name() string {
	return sqlc.Qualified(t.Schema(), "setting")
}

func (t *setting) As(a string) sqlc.Selectable {
	return &setting{

		ID: t.ID,

		NAME: t.NAME,

		VALUE: t.VALUE,

		VALUE_TEXT: t.VALUE_TEXT,

		MODULE_ID: t.MODULE_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *setting) Alias() string {
	return t.alias
}

func (t *setting) MaybeAlias() string {
	if t.alias == "" {
		return "setting"
	} else {
		return t.alias
	}
}

/////

func (t *setting) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(SETTING, strings.ToUpper(name))
}

func (t *setting) DateField(name string) sqlc.DateField {
	return sqlc.Date(SETTING, strings.ToUpper(name))
}

func (t *setting) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(SETTING, strings.ToUpper(name))
}

func (t *setting) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(SETTING, strings.ToUpper(name))
}

func (t *setting) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(SETTING, strings.ToUpper(name))
}

func (t *setting) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(SETTING, strings.ToUpper(name))
}

func (t *setting) IntField(name string) sqlc.IntField {
	return sqlc.Int(SETTING, strings.ToUpper(name))
}

func (t *setting) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(SETTING, strings.ToUpper(name))
}

func (t *setting) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(SETTING, strings.ToUpper(name))
}

func (t *setting) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(SETTING, strings.ToUpper(name))
}

func (t *setting) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(SETTING, strings.ToUpper(name))
}

func (t *setting) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(SETTING, strings.ToUpper(name))
}

func (t *setting) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(SETTING, strings.ToUpper(name))
}

func (t *setting) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(SETTING, strings.ToUpper(name))
}

func (t *setting) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(SETTING, strings.ToUpper(name))
}

func (t *setting) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(SETTING, strings.ToUpper(name))
}

func (t *setting) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(SETTING, strings.ToUpper(name))
}

func (t *setting) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(SETTING, strings.ToUpper(name))
}

func (t *setting) StringField(name string) sqlc.StringField {
	return sqlc.String(SETTING, strings.ToUpper(name))
}

func (t *setting) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(SETTING, strings.ToUpper(name))
}

/////

func (t *setting) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(SETTING, "ID"),

		sqlc.String(SETTING, "NAME"),

		sqlc.NullString(SETTING, "VALUE"),

		sqlc.NullString(SETTING, "VALUE_TEXT"),

		sqlc.NullString(SETTING, "MODULE_ID"),

		sqlc.NullDatetime(SETTING, "CREATED_AT"),

		sqlc.NullInt(SETTING, "CREATED_BY"),

		sqlc.NullDatetime(SETTING, "UPDATED_AT"),

		sqlc.NullInt(SETTING, "UPDATED_BY"),
	}
}

type space struct {
	ID sqlc.IntField

	GUID sqlc.NullStringField

	WALL_ID sqlc.NullIntField

	NAME sqlc.StringField

	DESCRIPTION sqlc.NullStringField

	WEBSITE sqlc.NullStringField

	JOIN_POLICY sqlc.NullIntField

	VISIBILITY sqlc.NullIntField

	STATUS sqlc.IntField

	TAGS sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	LDAP_DN sqlc.NullStringField

	AUTO_ADD_NEW_MEMBERS sqlc.NullIntField

	alias string
}

func (t *space) IsSelectable() {}

func (t *space) Schema() string {
	return Schema
}

func (t *space) Name() string {
	return sqlc.Qualified(t.Schema(), "space")
}

func (t *space) As(a string) sqlc.Selectable {
	return &space{

		ID: t.ID,

		GUID: t.GUID,

		WALL_ID: t.WALL_ID,

		NAME: t.NAME,

		DESCRIPTION: t.DESCRIPTION,

		WEBSITE: t.WEBSITE,

		JOIN_POLICY: t.JOIN_POLICY,

		VISIBILITY: t.VISIBILITY,

		STATUS: t.STATUS,

		TAGS: t.TAGS,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		LDAP_DN: t.LDAP_DN,

		AUTO_ADD_NEW_MEMBERS: t.AUTO_ADD_NEW_MEMBERS,

		alias: a,
	}
}

func (t *space) Alias() string {
	return t.alias
}

func (t *space) MaybeAlias() string {
	if t.alias == "" {
		return "space"
	} else {
		return t.alias
	}
}

/////

func (t *space) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(SPACE, strings.ToUpper(name))
}

func (t *space) DateField(name string) sqlc.DateField {
	return sqlc.Date(SPACE, strings.ToUpper(name))
}

func (t *space) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(SPACE, strings.ToUpper(name))
}

func (t *space) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(SPACE, strings.ToUpper(name))
}

func (t *space) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(SPACE, strings.ToUpper(name))
}

func (t *space) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(SPACE, strings.ToUpper(name))
}

func (t *space) IntField(name string) sqlc.IntField {
	return sqlc.Int(SPACE, strings.ToUpper(name))
}

func (t *space) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(SPACE, strings.ToUpper(name))
}

func (t *space) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(SPACE, strings.ToUpper(name))
}

func (t *space) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(SPACE, strings.ToUpper(name))
}

func (t *space) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(SPACE, strings.ToUpper(name))
}

func (t *space) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(SPACE, strings.ToUpper(name))
}

func (t *space) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(SPACE, strings.ToUpper(name))
}

func (t *space) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(SPACE, strings.ToUpper(name))
}

func (t *space) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(SPACE, strings.ToUpper(name))
}

func (t *space) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(SPACE, strings.ToUpper(name))
}

func (t *space) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(SPACE, strings.ToUpper(name))
}

func (t *space) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(SPACE, strings.ToUpper(name))
}

func (t *space) StringField(name string) sqlc.StringField {
	return sqlc.String(SPACE, strings.ToUpper(name))
}

func (t *space) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(SPACE, strings.ToUpper(name))
}

/////

func (t *space) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(SPACE, "ID"),

		sqlc.NullString(SPACE, "GUID"),

		sqlc.NullInt(SPACE, "WALL_ID"),

		sqlc.String(SPACE, "NAME"),

		sqlc.NullString(SPACE, "DESCRIPTION"),

		sqlc.NullString(SPACE, "WEBSITE"),

		sqlc.NullInt(SPACE, "JOIN_POLICY"),

		sqlc.NullInt(SPACE, "VISIBILITY"),

		sqlc.Int(SPACE, "STATUS"),

		sqlc.NullString(SPACE, "TAGS"),

		sqlc.NullDatetime(SPACE, "CREATED_AT"),

		sqlc.NullInt(SPACE, "CREATED_BY"),

		sqlc.NullDatetime(SPACE, "UPDATED_AT"),

		sqlc.NullInt(SPACE, "UPDATED_BY"),

		sqlc.NullString(SPACE, "LDAP_DN"),

		sqlc.NullInt(SPACE, "AUTO_ADD_NEW_MEMBERS"),
	}
}

type space_membership struct {
	SPACE_ID sqlc.IntField

	USER_ID sqlc.IntField

	ORIGINATOR_USER_ID sqlc.NullStringField

	STATUS sqlc.NullIntField

	REQUEST_MESSAGE sqlc.NullStringField

	LAST_VISIT sqlc.NullDatetimeField

	INVITE_ROLE sqlc.NullIntField

	ADMIN_ROLE sqlc.NullIntField

	SHARE_ROLE sqlc.NullIntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *space_membership) IsSelectable() {}

func (t *space_membership) Schema() string {
	return Schema
}

func (t *space_membership) Name() string {
	return sqlc.Qualified(t.Schema(), "space_membership")
}

func (t *space_membership) As(a string) sqlc.Selectable {
	return &space_membership{

		SPACE_ID: t.SPACE_ID,

		USER_ID: t.USER_ID,

		ORIGINATOR_USER_ID: t.ORIGINATOR_USER_ID,

		STATUS: t.STATUS,

		REQUEST_MESSAGE: t.REQUEST_MESSAGE,

		LAST_VISIT: t.LAST_VISIT,

		INVITE_ROLE: t.INVITE_ROLE,

		ADMIN_ROLE: t.ADMIN_ROLE,

		SHARE_ROLE: t.SHARE_ROLE,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *space_membership) Alias() string {
	return t.alias
}

func (t *space_membership) MaybeAlias() string {
	if t.alias == "" {
		return "space_membership"
	} else {
		return t.alias
	}
}

/////

func (t *space_membership) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) DateField(name string) sqlc.DateField {
	return sqlc.Date(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) IntField(name string) sqlc.IntField {
	return sqlc.Int(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) StringField(name string) sqlc.StringField {
	return sqlc.String(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

func (t *space_membership) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(SPACE_MEMBERSHIP, strings.ToUpper(name))
}

/////

func (t *space_membership) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(SPACE_MEMBERSHIP, "SPACE_ID"),

		sqlc.Int(SPACE_MEMBERSHIP, "USER_ID"),

		sqlc.NullString(SPACE_MEMBERSHIP, "ORIGINATOR_USER_ID"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "STATUS"),

		sqlc.NullString(SPACE_MEMBERSHIP, "REQUEST_MESSAGE"),

		sqlc.NullDatetime(SPACE_MEMBERSHIP, "LAST_VISIT"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "INVITE_ROLE"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "ADMIN_ROLE"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "SHARE_ROLE"),

		sqlc.NullDatetime(SPACE_MEMBERSHIP, "CREATED_AT"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "CREATED_BY"),

		sqlc.NullDatetime(SPACE_MEMBERSHIP, "UPDATED_AT"),

		sqlc.NullInt(SPACE_MEMBERSHIP, "UPDATED_BY"),
	}
}

type space_module struct {
	ID sqlc.IntField

	MODULE_ID sqlc.StringField

	SPACE_ID sqlc.IntField

	STATE sqlc.NullIntField

	alias string
}

func (t *space_module) IsSelectable() {}

func (t *space_module) Schema() string {
	return Schema
}

func (t *space_module) Name() string {
	return sqlc.Qualified(t.Schema(), "space_module")
}

func (t *space_module) As(a string) sqlc.Selectable {
	return &space_module{

		ID: t.ID,

		MODULE_ID: t.MODULE_ID,

		SPACE_ID: t.SPACE_ID,

		STATE: t.STATE,

		alias: a,
	}
}

func (t *space_module) Alias() string {
	return t.alias
}

func (t *space_module) MaybeAlias() string {
	if t.alias == "" {
		return "space_module"
	} else {
		return t.alias
	}
}

/////

func (t *space_module) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) DateField(name string) sqlc.DateField {
	return sqlc.Date(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) IntField(name string) sqlc.IntField {
	return sqlc.Int(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) StringField(name string) sqlc.StringField {
	return sqlc.String(SPACE_MODULE, strings.ToUpper(name))
}

func (t *space_module) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(SPACE_MODULE, strings.ToUpper(name))
}

/////

func (t *space_module) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(SPACE_MODULE, "ID"),

		sqlc.String(SPACE_MODULE, "MODULE_ID"),

		sqlc.Int(SPACE_MODULE, "SPACE_ID"),

		sqlc.NullInt(SPACE_MODULE, "STATE"),
	}
}

type space_setting struct {
	ID sqlc.IntField

	SPACE_ID sqlc.NullIntField

	MODULE_ID sqlc.NullStringField

	NAME sqlc.NullStringField

	VALUE sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *space_setting) IsSelectable() {}

func (t *space_setting) Schema() string {
	return Schema
}

func (t *space_setting) Name() string {
	return sqlc.Qualified(t.Schema(), "space_setting")
}

func (t *space_setting) As(a string) sqlc.Selectable {
	return &space_setting{

		ID: t.ID,

		SPACE_ID: t.SPACE_ID,

		MODULE_ID: t.MODULE_ID,

		NAME: t.NAME,

		VALUE: t.VALUE,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *space_setting) Alias() string {
	return t.alias
}

func (t *space_setting) MaybeAlias() string {
	if t.alias == "" {
		return "space_setting"
	} else {
		return t.alias
	}
}

/////

func (t *space_setting) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) DateField(name string) sqlc.DateField {
	return sqlc.Date(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) IntField(name string) sqlc.IntField {
	return sqlc.Int(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) StringField(name string) sqlc.StringField {
	return sqlc.String(SPACE_SETTING, strings.ToUpper(name))
}

func (t *space_setting) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(SPACE_SETTING, strings.ToUpper(name))
}

/////

func (t *space_setting) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(SPACE_SETTING, "ID"),

		sqlc.NullInt(SPACE_SETTING, "SPACE_ID"),

		sqlc.NullString(SPACE_SETTING, "MODULE_ID"),

		sqlc.NullString(SPACE_SETTING, "NAME"),

		sqlc.NullString(SPACE_SETTING, "VALUE"),

		sqlc.NullDatetime(SPACE_SETTING, "CREATED_AT"),

		sqlc.NullInt(SPACE_SETTING, "CREATED_BY"),

		sqlc.NullDatetime(SPACE_SETTING, "UPDATED_AT"),

		sqlc.NullInt(SPACE_SETTING, "UPDATED_BY"),
	}
}

type url_oembed struct {
	URL sqlc.StringField

	PREVIEW sqlc.StringField

	alias string
}

func (t *url_oembed) IsSelectable() {}

func (t *url_oembed) Schema() string {
	return Schema
}

func (t *url_oembed) Name() string {
	return sqlc.Qualified(t.Schema(), "url_oembed")
}

func (t *url_oembed) As(a string) sqlc.Selectable {
	return &url_oembed{

		URL: t.URL,

		PREVIEW: t.PREVIEW,

		alias: a,
	}
}

func (t *url_oembed) Alias() string {
	return t.alias
}

func (t *url_oembed) MaybeAlias() string {
	if t.alias == "" {
		return "url_oembed"
	} else {
		return t.alias
	}
}

/////

func (t *url_oembed) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) DateField(name string) sqlc.DateField {
	return sqlc.Date(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) IntField(name string) sqlc.IntField {
	return sqlc.Int(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) StringField(name string) sqlc.StringField {
	return sqlc.String(URL_OEMBED, strings.ToUpper(name))
}

func (t *url_oembed) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(URL_OEMBED, strings.ToUpper(name))
}

/////

func (t *url_oembed) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.String(URL_OEMBED, "URL"),

		sqlc.String(URL_OEMBED, "PREVIEW"),
	}
}

type user struct {
	ID sqlc.IntField

	GUID sqlc.NullStringField

	WALL_ID sqlc.NullIntField

	GROUP_ID sqlc.NullIntField

	STATUS sqlc.NullIntField

	SUPER_ADMIN sqlc.IntField

	USERNAME sqlc.NullStringField

	EMAIL sqlc.NullStringField

	AUTH_MODE sqlc.StringField

	TAGS sqlc.NullStringField

	LANGUAGE sqlc.NullStringField

	LAST_ACTIVITY_EMAIL sqlc.DatetimeField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	LAST_LOGIN sqlc.NullDatetimeField

	alias string
}

func (t *user) IsSelectable() {}

func (t *user) Schema() string {
	return Schema
}

func (t *user) Name() string {
	return sqlc.Qualified(t.Schema(), "user")
}

func (t *user) As(a string) sqlc.Selectable {
	return &user{

		ID: t.ID,

		GUID: t.GUID,

		WALL_ID: t.WALL_ID,

		GROUP_ID: t.GROUP_ID,

		STATUS: t.STATUS,

		SUPER_ADMIN: t.SUPER_ADMIN,

		USERNAME: t.USERNAME,

		EMAIL: t.EMAIL,

		AUTH_MODE: t.AUTH_MODE,

		TAGS: t.TAGS,

		LANGUAGE: t.LANGUAGE,

		LAST_ACTIVITY_EMAIL: t.LAST_ACTIVITY_EMAIL,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		LAST_LOGIN: t.LAST_LOGIN,

		alias: a,
	}
}

func (t *user) Alias() string {
	return t.alias
}

func (t *user) MaybeAlias() string {
	if t.alias == "" {
		return "user"
	} else {
		return t.alias
	}
}

/////

func (t *user) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER, strings.ToUpper(name))
}

func (t *user) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER, strings.ToUpper(name))
}

func (t *user) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER, strings.ToUpper(name))
}

func (t *user) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER, strings.ToUpper(name))
}

func (t *user) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER, strings.ToUpper(name))
}

func (t *user) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER, strings.ToUpper(name))
}

func (t *user) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER, strings.ToUpper(name))
}

func (t *user) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER, strings.ToUpper(name))
}

func (t *user) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER, strings.ToUpper(name))
}

func (t *user) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER, strings.ToUpper(name))
}

func (t *user) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER, strings.ToUpper(name))
}

func (t *user) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER, strings.ToUpper(name))
}

func (t *user) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER, strings.ToUpper(name))
}

func (t *user) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER, strings.ToUpper(name))
}

func (t *user) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER, strings.ToUpper(name))
}

func (t *user) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER, strings.ToUpper(name))
}

func (t *user) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER, strings.ToUpper(name))
}

func (t *user) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER, strings.ToUpper(name))
}

func (t *user) StringField(name string) sqlc.StringField {
	return sqlc.String(USER, strings.ToUpper(name))
}

func (t *user) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER, strings.ToUpper(name))
}

/////

func (t *user) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER, "ID"),

		sqlc.NullString(USER, "GUID"),

		sqlc.NullInt(USER, "WALL_ID"),

		sqlc.NullInt(USER, "GROUP_ID"),

		sqlc.NullInt(USER, "STATUS"),

		sqlc.Int(USER, "SUPER_ADMIN"),

		sqlc.NullString(USER, "USERNAME"),

		sqlc.NullString(USER, "EMAIL"),

		sqlc.String(USER, "AUTH_MODE"),

		sqlc.NullString(USER, "TAGS"),

		sqlc.NullString(USER, "LANGUAGE"),

		sqlc.Datetime(USER, "LAST_ACTIVITY_EMAIL"),

		sqlc.NullDatetime(USER, "CREATED_AT"),

		sqlc.NullInt(USER, "CREATED_BY"),

		sqlc.NullDatetime(USER, "UPDATED_AT"),

		sqlc.NullInt(USER, "UPDATED_BY"),

		sqlc.NullDatetime(USER, "LAST_LOGIN"),
	}
}

type user_follow struct {
	ID sqlc.IntField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	USER_ID sqlc.IntField

	SEND_NOTIFICATIONS sqlc.NullIntField

	alias string
}

func (t *user_follow) IsSelectable() {}

func (t *user_follow) Schema() string {
	return Schema
}

func (t *user_follow) Name() string {
	return sqlc.Qualified(t.Schema(), "user_follow")
}

func (t *user_follow) As(a string) sqlc.Selectable {
	return &user_follow{

		ID: t.ID,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		USER_ID: t.USER_ID,

		SEND_NOTIFICATIONS: t.SEND_NOTIFICATIONS,

		alias: a,
	}
}

func (t *user_follow) Alias() string {
	return t.alias
}

func (t *user_follow) MaybeAlias() string {
	if t.alias == "" {
		return "user_follow"
	} else {
		return t.alias
	}
}

/////

func (t *user_follow) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_FOLLOW, strings.ToUpper(name))
}

func (t *user_follow) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_FOLLOW, strings.ToUpper(name))
}

/////

func (t *user_follow) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_FOLLOW, "ID"),

		sqlc.String(USER_FOLLOW, "OBJECT_MODEL"),

		sqlc.Int(USER_FOLLOW, "OBJECT_ID"),

		sqlc.Int(USER_FOLLOW, "USER_ID"),

		sqlc.NullInt(USER_FOLLOW, "SEND_NOTIFICATIONS"),
	}
}

type user_http_session struct {
	ID sqlc.StringField

	EXPIRE sqlc.NullIntField

	USER_ID sqlc.NullIntField

	DATA sqlc.NullBlobField

	alias string
}

func (t *user_http_session) IsSelectable() {}

func (t *user_http_session) Schema() string {
	return Schema
}

func (t *user_http_session) Name() string {
	return sqlc.Qualified(t.Schema(), "user_http_session")
}

func (t *user_http_session) As(a string) sqlc.Selectable {
	return &user_http_session{

		ID: t.ID,

		EXPIRE: t.EXPIRE,

		USER_ID: t.USER_ID,

		DATA: t.DATA,

		alias: a,
	}
}

func (t *user_http_session) Alias() string {
	return t.alias
}

func (t *user_http_session) MaybeAlias() string {
	if t.alias == "" {
		return "user_http_session"
	} else {
		return t.alias
	}
}

/////

func (t *user_http_session) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_HTTP_SESSION, strings.ToUpper(name))
}

func (t *user_http_session) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_HTTP_SESSION, strings.ToUpper(name))
}

/////

func (t *user_http_session) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.String(USER_HTTP_SESSION, "ID"),

		sqlc.NullInt(USER_HTTP_SESSION, "EXPIRE"),

		sqlc.NullInt(USER_HTTP_SESSION, "USER_ID"),

		sqlc.NullBlob(USER_HTTP_SESSION, "DATA"),
	}
}

type user_invite struct {
	ID sqlc.IntField

	USER_ORIGINATOR_ID sqlc.NullIntField

	SPACE_INVITE_ID sqlc.NullIntField

	EMAIL sqlc.StringField

	SOURCE sqlc.NullStringField

	TOKEN sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *user_invite) IsSelectable() {}

func (t *user_invite) Schema() string {
	return Schema
}

func (t *user_invite) Name() string {
	return sqlc.Qualified(t.Schema(), "user_invite")
}

func (t *user_invite) As(a string) sqlc.Selectable {
	return &user_invite{

		ID: t.ID,

		USER_ORIGINATOR_ID: t.USER_ORIGINATOR_ID,

		SPACE_INVITE_ID: t.SPACE_INVITE_ID,

		EMAIL: t.EMAIL,

		SOURCE: t.SOURCE,

		TOKEN: t.TOKEN,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *user_invite) Alias() string {
	return t.alias
}

func (t *user_invite) MaybeAlias() string {
	if t.alias == "" {
		return "user_invite"
	} else {
		return t.alias
	}
}

/////

func (t *user_invite) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_INVITE, strings.ToUpper(name))
}

func (t *user_invite) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_INVITE, strings.ToUpper(name))
}

/////

func (t *user_invite) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_INVITE, "ID"),

		sqlc.NullInt(USER_INVITE, "USER_ORIGINATOR_ID"),

		sqlc.NullInt(USER_INVITE, "SPACE_INVITE_ID"),

		sqlc.String(USER_INVITE, "EMAIL"),

		sqlc.NullString(USER_INVITE, "SOURCE"),

		sqlc.NullString(USER_INVITE, "TOKEN"),

		sqlc.NullDatetime(USER_INVITE, "CREATED_AT"),

		sqlc.NullInt(USER_INVITE, "CREATED_BY"),

		sqlc.NullDatetime(USER_INVITE, "UPDATED_AT"),

		sqlc.NullInt(USER_INVITE, "UPDATED_BY"),
	}
}

type user_mentioning struct {
	ID sqlc.IntField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	USER_ID sqlc.IntField

	alias string
}

func (t *user_mentioning) IsSelectable() {}

func (t *user_mentioning) Schema() string {
	return Schema
}

func (t *user_mentioning) Name() string {
	return sqlc.Qualified(t.Schema(), "user_mentioning")
}

func (t *user_mentioning) As(a string) sqlc.Selectable {
	return &user_mentioning{

		ID: t.ID,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		USER_ID: t.USER_ID,

		alias: a,
	}
}

func (t *user_mentioning) Alias() string {
	return t.alias
}

func (t *user_mentioning) MaybeAlias() string {
	if t.alias == "" {
		return "user_mentioning"
	} else {
		return t.alias
	}
}

/////

func (t *user_mentioning) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_MENTIONING, strings.ToUpper(name))
}

func (t *user_mentioning) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_MENTIONING, strings.ToUpper(name))
}

/////

func (t *user_mentioning) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_MENTIONING, "ID"),

		sqlc.String(USER_MENTIONING, "OBJECT_MODEL"),

		sqlc.Int(USER_MENTIONING, "OBJECT_ID"),

		sqlc.Int(USER_MENTIONING, "USER_ID"),
	}
}

type user_module struct {
	ID sqlc.IntField

	MODULE_ID sqlc.StringField

	USER_ID sqlc.IntField

	STATE sqlc.NullIntField

	alias string
}

func (t *user_module) IsSelectable() {}

func (t *user_module) Schema() string {
	return Schema
}

func (t *user_module) Name() string {
	return sqlc.Qualified(t.Schema(), "user_module")
}

func (t *user_module) As(a string) sqlc.Selectable {
	return &user_module{

		ID: t.ID,

		MODULE_ID: t.MODULE_ID,

		USER_ID: t.USER_ID,

		STATE: t.STATE,

		alias: a,
	}
}

func (t *user_module) Alias() string {
	return t.alias
}

func (t *user_module) MaybeAlias() string {
	if t.alias == "" {
		return "user_module"
	} else {
		return t.alias
	}
}

/////

func (t *user_module) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_MODULE, strings.ToUpper(name))
}

func (t *user_module) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_MODULE, strings.ToUpper(name))
}

/////

func (t *user_module) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_MODULE, "ID"),

		sqlc.String(USER_MODULE, "MODULE_ID"),

		sqlc.Int(USER_MODULE, "USER_ID"),

		sqlc.NullInt(USER_MODULE, "STATE"),
	}
}

type user_password struct {
	ID sqlc.IntField

	USER_ID sqlc.NullIntField

	ALGORITHM sqlc.NullStringField

	PASSWORD sqlc.NullStringField

	SALT sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	alias string
}

func (t *user_password) IsSelectable() {}

func (t *user_password) Schema() string {
	return Schema
}

func (t *user_password) Name() string {
	return sqlc.Qualified(t.Schema(), "user_password")
}

func (t *user_password) As(a string) sqlc.Selectable {
	return &user_password{

		ID: t.ID,

		USER_ID: t.USER_ID,

		ALGORITHM: t.ALGORITHM,

		PASSWORD: t.PASSWORD,

		SALT: t.SALT,

		CREATED_AT: t.CREATED_AT,

		alias: a,
	}
}

func (t *user_password) Alias() string {
	return t.alias
}

func (t *user_password) MaybeAlias() string {
	if t.alias == "" {
		return "user_password"
	} else {
		return t.alias
	}
}

/////

func (t *user_password) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_PASSWORD, strings.ToUpper(name))
}

func (t *user_password) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_PASSWORD, strings.ToUpper(name))
}

/////

func (t *user_password) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_PASSWORD, "ID"),

		sqlc.NullInt(USER_PASSWORD, "USER_ID"),

		sqlc.NullString(USER_PASSWORD, "ALGORITHM"),

		sqlc.NullString(USER_PASSWORD, "PASSWORD"),

		sqlc.NullString(USER_PASSWORD, "SALT"),

		sqlc.NullDatetime(USER_PASSWORD, "CREATED_AT"),
	}
}

type user_setting struct {
	ID sqlc.IntField

	USER_ID sqlc.NullIntField

	MODULE_ID sqlc.NullStringField

	NAME sqlc.NullStringField

	VALUE sqlc.NullStringField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *user_setting) IsSelectable() {}

func (t *user_setting) Schema() string {
	return Schema
}

func (t *user_setting) Name() string {
	return sqlc.Qualified(t.Schema(), "user_setting")
}

func (t *user_setting) As(a string) sqlc.Selectable {
	return &user_setting{

		ID: t.ID,

		USER_ID: t.USER_ID,

		MODULE_ID: t.MODULE_ID,

		NAME: t.NAME,

		VALUE: t.VALUE,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *user_setting) Alias() string {
	return t.alias
}

func (t *user_setting) MaybeAlias() string {
	if t.alias == "" {
		return "user_setting"
	} else {
		return t.alias
	}
}

/////

func (t *user_setting) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) DateField(name string) sqlc.DateField {
	return sqlc.Date(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) IntField(name string) sqlc.IntField {
	return sqlc.Int(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) StringField(name string) sqlc.StringField {
	return sqlc.String(USER_SETTING, strings.ToUpper(name))
}

func (t *user_setting) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(USER_SETTING, strings.ToUpper(name))
}

/////

func (t *user_setting) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(USER_SETTING, "ID"),

		sqlc.NullInt(USER_SETTING, "USER_ID"),

		sqlc.NullString(USER_SETTING, "MODULE_ID"),

		sqlc.NullString(USER_SETTING, "NAME"),

		sqlc.NullString(USER_SETTING, "VALUE"),

		sqlc.NullDatetime(USER_SETTING, "CREATED_AT"),

		sqlc.NullInt(USER_SETTING, "CREATED_BY"),

		sqlc.NullDatetime(USER_SETTING, "UPDATED_AT"),

		sqlc.NullInt(USER_SETTING, "UPDATED_BY"),
	}
}

type wall struct {
	ID sqlc.IntField

	TYPE sqlc.NullStringField

	OBJECT_MODEL sqlc.StringField

	OBJECT_ID sqlc.IntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *wall) IsSelectable() {}

func (t *wall) Schema() string {
	return Schema
}

func (t *wall) Name() string {
	return sqlc.Qualified(t.Schema(), "wall")
}

func (t *wall) As(a string) sqlc.Selectable {
	return &wall{

		ID: t.ID,

		TYPE: t.TYPE,

		OBJECT_MODEL: t.OBJECT_MODEL,

		OBJECT_ID: t.OBJECT_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *wall) Alias() string {
	return t.alias
}

func (t *wall) MaybeAlias() string {
	if t.alias == "" {
		return "wall"
	} else {
		return t.alias
	}
}

/////

func (t *wall) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(WALL, strings.ToUpper(name))
}

func (t *wall) DateField(name string) sqlc.DateField {
	return sqlc.Date(WALL, strings.ToUpper(name))
}

func (t *wall) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(WALL, strings.ToUpper(name))
}

func (t *wall) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(WALL, strings.ToUpper(name))
}

func (t *wall) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(WALL, strings.ToUpper(name))
}

func (t *wall) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(WALL, strings.ToUpper(name))
}

func (t *wall) IntField(name string) sqlc.IntField {
	return sqlc.Int(WALL, strings.ToUpper(name))
}

func (t *wall) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(WALL, strings.ToUpper(name))
}

func (t *wall) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(WALL, strings.ToUpper(name))
}

func (t *wall) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(WALL, strings.ToUpper(name))
}

func (t *wall) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(WALL, strings.ToUpper(name))
}

func (t *wall) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(WALL, strings.ToUpper(name))
}

func (t *wall) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(WALL, strings.ToUpper(name))
}

func (t *wall) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(WALL, strings.ToUpper(name))
}

func (t *wall) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(WALL, strings.ToUpper(name))
}

func (t *wall) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(WALL, strings.ToUpper(name))
}

func (t *wall) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(WALL, strings.ToUpper(name))
}

func (t *wall) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(WALL, strings.ToUpper(name))
}

func (t *wall) StringField(name string) sqlc.StringField {
	return sqlc.String(WALL, strings.ToUpper(name))
}

func (t *wall) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(WALL, strings.ToUpper(name))
}

/////

func (t *wall) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(WALL, "ID"),

		sqlc.NullString(WALL, "TYPE"),

		sqlc.String(WALL, "OBJECT_MODEL"),

		sqlc.Int(WALL, "OBJECT_ID"),

		sqlc.NullDatetime(WALL, "CREATED_AT"),

		sqlc.NullInt(WALL, "CREATED_BY"),

		sqlc.NullDatetime(WALL, "UPDATED_AT"),

		sqlc.NullInt(WALL, "UPDATED_BY"),
	}
}

type wall_entry struct {
	ID sqlc.IntField

	WALL_ID sqlc.IntField

	CONTENT_ID sqlc.IntField

	CREATED_AT sqlc.NullDatetimeField

	CREATED_BY sqlc.NullIntField

	UPDATED_AT sqlc.NullDatetimeField

	UPDATED_BY sqlc.NullIntField

	alias string
}

func (t *wall_entry) IsSelectable() {}

func (t *wall_entry) Schema() string {
	return Schema
}

func (t *wall_entry) Name() string {
	return sqlc.Qualified(t.Schema(), "wall_entry")
}

func (t *wall_entry) As(a string) sqlc.Selectable {
	return &wall_entry{

		ID: t.ID,

		WALL_ID: t.WALL_ID,

		CONTENT_ID: t.CONTENT_ID,

		CREATED_AT: t.CREATED_AT,

		CREATED_BY: t.CREATED_BY,

		UPDATED_AT: t.UPDATED_AT,

		UPDATED_BY: t.UPDATED_BY,

		alias: a,
	}
}

func (t *wall_entry) Alias() string {
	return t.alias
}

func (t *wall_entry) MaybeAlias() string {
	if t.alias == "" {
		return "wall_entry"
	} else {
		return t.alias
	}
}

/////

func (t *wall_entry) BoolField(name string) sqlc.BoolField {
	return sqlc.Bool(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) DateField(name string) sqlc.DateField {
	return sqlc.Date(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) DatetimeField(name string) sqlc.DatetimeField {
	return sqlc.Datetime(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) Float32Field(name string) sqlc.Float32Field {
	return sqlc.Float32(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) Float64Field(name string) sqlc.Float64Field {
	return sqlc.Float64(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) BlobField(name string) sqlc.BlobField {
	return sqlc.Blob(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) IntField(name string) sqlc.IntField {
	return sqlc.Int(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) Int64Field(name string) sqlc.Int64Field {
	return sqlc.Int64(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullBoolField(name string) sqlc.NullBoolField {
	return sqlc.NullBool(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullDateField(name string) sqlc.NullDateField {
	return sqlc.NullDate(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullDatetimeField(name string) sqlc.NullDatetimeField {
	return sqlc.NullDatetime(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullFloat32Field(name string) sqlc.NullFloat32Field {
	return sqlc.NullFloat32(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullFloat64Field(name string) sqlc.NullFloat64Field {
	return sqlc.NullFloat64(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullBlobField(name string) sqlc.NullBlobField {
	return sqlc.NullBlob(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullIntField(name string) sqlc.NullIntField {
	return sqlc.NullInt(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullInt64Field(name string) sqlc.NullInt64Field {
	return sqlc.NullInt64(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullStringField(name string) sqlc.NullStringField {
	return sqlc.NullString(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) NullTimeField(name string) sqlc.NullTimeField {
	return sqlc.NullTime(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) StringField(name string) sqlc.StringField {
	return sqlc.String(WALL_ENTRY, strings.ToUpper(name))
}

func (t *wall_entry) TimeField(name string) sqlc.TimeField {
	return sqlc.Time(WALL_ENTRY, strings.ToUpper(name))
}

/////

func (t *wall_entry) Fields() []sqlc.Field {
	return []sqlc.Field{

		sqlc.Int(WALL_ENTRY, "ID"),

		sqlc.Int(WALL_ENTRY, "WALL_ID"),

		sqlc.Int(WALL_ENTRY, "CONTENT_ID"),

		sqlc.NullDatetime(WALL_ENTRY, "CREATED_AT"),

		sqlc.NullInt(WALL_ENTRY, "CREATED_BY"),

		sqlc.NullDatetime(WALL_ENTRY, "UPDATED_AT"),

		sqlc.NullInt(WALL_ENTRY, "UPDATED_BY"),
	}
}

var __activity = &activity{}
var ACTIVITY = &activity{

	ID: sqlc.Int(__activity, "ID"),

	TYPE: sqlc.NullString(__activity, "TYPE"),

	MODULE: sqlc.NullString(__activity, "MODULE"),

	OBJECT_MODEL: sqlc.NullString(__activity, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.NullString(__activity, "OBJECT_ID"),

	CREATED_AT: sqlc.NullDatetime(__activity, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__activity, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__activity, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__activity, "UPDATED_BY"),
}

var __comment = &comment{}
var COMMENT = &comment{

	ID: sqlc.Int(__comment, "ID"),

	MESSAGE: sqlc.NullString(__comment, "MESSAGE"),

	OBJECT_MODEL: sqlc.String(__comment, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__comment, "OBJECT_ID"),

	SPACE_ID: sqlc.NullInt(__comment, "SPACE_ID"),

	CREATED_AT: sqlc.NullDatetime(__comment, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__comment, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__comment, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__comment, "UPDATED_BY"),
}

var __content = &content{}
var CONTENT = &content{

	ID: sqlc.Int(__content, "ID"),

	GUID: sqlc.String(__content, "GUID"),

	OBJECT_MODEL: sqlc.String(__content, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__content, "OBJECT_ID"),

	VISIBILITY: sqlc.NullInt(__content, "VISIBILITY"),

	STICKED: sqlc.NullInt(__content, "STICKED"),

	ARCHIVED: sqlc.NullString(__content, "ARCHIVED"),

	SPACE_ID: sqlc.NullInt(__content, "SPACE_ID"),

	USER_ID: sqlc.NullInt(__content, "USER_ID"),

	CREATED_AT: sqlc.NullDatetime(__content, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__content, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__content, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__content, "UPDATED_BY"),
}

var __file = &file{}
var FILE = &file{

	ID: sqlc.Int(__file, "ID"),

	GUID: sqlc.NullString(__file, "GUID"),

	OBJECT_MODEL: sqlc.NullString(__file, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.NullString(__file, "OBJECT_ID"),

	FILE_NAME: sqlc.NullString(__file, "FILE_NAME"),

	TITLE: sqlc.NullString(__file, "TITLE"),

	MIME_TYPE: sqlc.NullString(__file, "MIME_TYPE"),

	SIZE: sqlc.NullString(__file, "SIZE"),

	CREATED_AT: sqlc.NullDatetime(__file, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__file, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__file, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__file, "UPDATED_BY"),
}

var __group = &group{}
var GROUP = &group{

	ID: sqlc.Int(__group, "ID"),

	SPACE_ID: sqlc.NullInt(__group, "SPACE_ID"),

	NAME: sqlc.NullString(__group, "NAME"),

	DESCRIPTION: sqlc.NullString(__group, "DESCRIPTION"),

	CREATED_AT: sqlc.NullDatetime(__group, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__group, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__group, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__group, "UPDATED_BY"),

	LDAP_DN: sqlc.NullString(__group, "LDAP_DN"),

	CAN_CREATE_PUBLIC_SPACES: sqlc.NullInt(__group, "CAN_CREATE_PUBLIC_SPACES"),

	CAN_CREATE_PRIVATE_SPACES: sqlc.NullInt(__group, "CAN_CREATE_PRIVATE_SPACES"),
}

var __group_admin = &group_admin{}
var GROUP_ADMIN = &group_admin{

	ID: sqlc.Int(__group_admin, "ID"),

	USER_ID: sqlc.Int(__group_admin, "USER_ID"),

	GROUP_ID: sqlc.Int(__group_admin, "GROUP_ID"),

	CREATED_AT: sqlc.Datetime(__group_admin, "CREATED_AT"),

	CREATED_BY: sqlc.Int(__group_admin, "CREATED_BY"),

	UPDATED_AT: sqlc.Datetime(__group_admin, "UPDATED_AT"),

	UPDATED_BY: sqlc.Int(__group_admin, "UPDATED_BY"),
}

var __like = &like{}
var LIKE = &like{

	ID: sqlc.Int(__like, "ID"),

	TARGET_USER_ID: sqlc.NullInt(__like, "TARGET_USER_ID"),

	OBJECT_MODEL: sqlc.String(__like, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__like, "OBJECT_ID"),

	CREATED_AT: sqlc.NullDatetime(__like, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__like, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__like, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__like, "UPDATED_BY"),
}

var __logging = &logging{}
var LOGGING = &logging{

	ID: sqlc.Int(__logging, "ID"),

	LEVEL: sqlc.NullString(__logging, "LEVEL"),

	CATEGORY: sqlc.NullString(__logging, "CATEGORY"),

	LOGTIME: sqlc.NullInt(__logging, "LOGTIME"),

	MESSAGE: sqlc.NullString(__logging, "MESSAGE"),
}

var __migration = &migration{}
var MIGRATION = &migration{

	VERSION: sqlc.String(__migration, "VERSION"),

	APPLY_TIME: sqlc.NullInt(__migration, "APPLY_TIME"),

	MODULE: sqlc.NullString(__migration, "MODULE"),
}

var __module_enabled = &module_enabled{}
var MODULE_ENABLED = &module_enabled{

	MODULE_ID: sqlc.String(__module_enabled, "MODULE_ID"),
}

var __notification = &notification{}
var NOTIFICATION = &notification{

	ID: sqlc.Int(__notification, "ID"),

	CLASS: sqlc.String(__notification, "CLASS"),

	USER_ID: sqlc.Int(__notification, "USER_ID"),

	SEEN: sqlc.NullInt(__notification, "SEEN"),

	SOURCE_OBJECT_MODEL: sqlc.NullString(__notification, "SOURCE_OBJECT_MODEL"),

	SOURCE_OBJECT_ID: sqlc.NullInt(__notification, "SOURCE_OBJECT_ID"),

	TARGET_OBJECT_MODEL: sqlc.NullString(__notification, "TARGET_OBJECT_MODEL"),

	TARGET_OBJECT_ID: sqlc.NullInt(__notification, "TARGET_OBJECT_ID"),

	SPACE_ID: sqlc.NullInt(__notification, "SPACE_ID"),

	EMAILED: sqlc.Int(__notification, "EMAILED"),

	CREATED_AT: sqlc.Datetime(__notification, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__notification, "CREATED_BY"),

	UPDATED_AT: sqlc.Datetime(__notification, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__notification, "UPDATED_BY"),
}

var __post = &post{}
var POST = &post{

	ID: sqlc.Int(__post, "ID"),

	MESSAGE_2TRASH: sqlc.NullString(__post, "MESSAGE_2TRASH"),

	MESSAGE: sqlc.NullString(__post, "MESSAGE"),

	URL: sqlc.NullString(__post, "URL"),

	CREATED_AT: sqlc.NullDatetime(__post, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__post, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__post, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__post, "UPDATED_BY"),
}

var __profile = &profile{}
var PROFILE = &profile{

	USER_ID: sqlc.Int(__profile, "USER_ID"),

	FIRSTNAME: sqlc.NullString(__profile, "FIRSTNAME"),

	LASTNAME: sqlc.NullString(__profile, "LASTNAME"),

	TITLE: sqlc.NullString(__profile, "TITLE"),

	GENDER: sqlc.NullString(__profile, "GENDER"),

	STREET: sqlc.NullString(__profile, "STREET"),

	ZIP: sqlc.NullString(__profile, "ZIP"),

	CITY: sqlc.NullString(__profile, "CITY"),

	COUNTRY: sqlc.NullString(__profile, "COUNTRY"),

	STATE: sqlc.NullString(__profile, "STATE"),

	BIRTHDAY_HIDE_YEAR: sqlc.NullInt(__profile, "BIRTHDAY_HIDE_YEAR"),

	BIRTHDAY: sqlc.NullDatetime(__profile, "BIRTHDAY"),

	ABOUT: sqlc.NullString(__profile, "ABOUT"),

	PHONE_PRIVATE: sqlc.NullString(__profile, "PHONE_PRIVATE"),

	PHONE_WORK: sqlc.NullString(__profile, "PHONE_WORK"),

	MOBILE: sqlc.NullString(__profile, "MOBILE"),

	FAX: sqlc.NullString(__profile, "FAX"),

	IM_SKYPE: sqlc.NullString(__profile, "IM_SKYPE"),

	IM_MSN: sqlc.NullString(__profile, "IM_MSN"),

	IM_ICQ: sqlc.NullInt(__profile, "IM_ICQ"),

	IM_XMPP: sqlc.NullString(__profile, "IM_XMPP"),

	URL: sqlc.NullString(__profile, "URL"),

	URL_FACEBOOK: sqlc.NullString(__profile, "URL_FACEBOOK"),

	URL_LINKEDIN: sqlc.NullString(__profile, "URL_LINKEDIN"),

	URL_XING: sqlc.NullString(__profile, "URL_XING"),

	URL_YOUTUBE: sqlc.NullString(__profile, "URL_YOUTUBE"),

	URL_VIMEO: sqlc.NullString(__profile, "URL_VIMEO"),

	URL_FLICKR: sqlc.NullString(__profile, "URL_FLICKR"),

	URL_MYSPACE: sqlc.NullString(__profile, "URL_MYSPACE"),

	URL_GOOGLEPLUS: sqlc.NullString(__profile, "URL_GOOGLEPLUS"),

	URL_TWITTER: sqlc.NullString(__profile, "URL_TWITTER"),
}

var __profile_field = &profile_field{}
var PROFILE_FIELD = &profile_field{

	ID: sqlc.Int(__profile_field, "ID"),

	PROFILE_FIELD_CATEGORY_ID: sqlc.Int(__profile_field, "PROFILE_FIELD_CATEGORY_ID"),

	MODULE_ID: sqlc.NullString(__profile_field, "MODULE_ID"),

	FIELD_TYPE_CLASS: sqlc.String(__profile_field, "FIELD_TYPE_CLASS"),

	FIELD_TYPE_CONFIG: sqlc.NullString(__profile_field, "FIELD_TYPE_CONFIG"),

	INTERNAL_NAME: sqlc.String(__profile_field, "INTERNAL_NAME"),

	TITLE: sqlc.String(__profile_field, "TITLE"),

	DESCRIPTION: sqlc.NullString(__profile_field, "DESCRIPTION"),

	SORT_ORDER: sqlc.Int(__profile_field, "SORT_ORDER"),

	REQUIRED: sqlc.NullInt(__profile_field, "REQUIRED"),

	SHOW_AT_REGISTRATION: sqlc.NullInt(__profile_field, "SHOW_AT_REGISTRATION"),

	EDITABLE: sqlc.Int(__profile_field, "EDITABLE"),

	VISIBLE: sqlc.Int(__profile_field, "VISIBLE"),

	CREATED_AT: sqlc.NullDatetime(__profile_field, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__profile_field, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__profile_field, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__profile_field, "UPDATED_BY"),

	LDAP_ATTRIBUTE: sqlc.NullString(__profile_field, "LDAP_ATTRIBUTE"),

	TRANSLATION_CATEGORY: sqlc.NullString(__profile_field, "TRANSLATION_CATEGORY"),

	IS_SYSTEM: sqlc.NullInt(__profile_field, "IS_SYSTEM"),
}

var __profile_field_category = &profile_field_category{}
var PROFILE_FIELD_CATEGORY = &profile_field_category{

	ID: sqlc.Int(__profile_field_category, "ID"),

	TITLE: sqlc.String(__profile_field_category, "TITLE"),

	DESCRIPTION: sqlc.String(__profile_field_category, "DESCRIPTION"),

	SORT_ORDER: sqlc.Int(__profile_field_category, "SORT_ORDER"),

	MODULE_ID: sqlc.NullInt(__profile_field_category, "MODULE_ID"),

	VISIBILITY: sqlc.Int(__profile_field_category, "VISIBILITY"),

	CREATED_AT: sqlc.NullDatetime(__profile_field_category, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__profile_field_category, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__profile_field_category, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__profile_field_category, "UPDATED_BY"),

	TRANSLATION_CATEGORY: sqlc.NullString(__profile_field_category, "TRANSLATION_CATEGORY"),

	IS_SYSTEM: sqlc.NullInt(__profile_field_category, "IS_SYSTEM"),
}

var __setting = &setting{}
var SETTING = &setting{

	ID: sqlc.Int(__setting, "ID"),

	NAME: sqlc.String(__setting, "NAME"),

	VALUE: sqlc.NullString(__setting, "VALUE"),

	VALUE_TEXT: sqlc.NullString(__setting, "VALUE_TEXT"),

	MODULE_ID: sqlc.NullString(__setting, "MODULE_ID"),

	CREATED_AT: sqlc.NullDatetime(__setting, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__setting, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__setting, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__setting, "UPDATED_BY"),
}

var __space = &space{}
var SPACE = &space{

	ID: sqlc.Int(__space, "ID"),

	GUID: sqlc.NullString(__space, "GUID"),

	WALL_ID: sqlc.NullInt(__space, "WALL_ID"),

	NAME: sqlc.String(__space, "NAME"),

	DESCRIPTION: sqlc.NullString(__space, "DESCRIPTION"),

	WEBSITE: sqlc.NullString(__space, "WEBSITE"),

	JOIN_POLICY: sqlc.NullInt(__space, "JOIN_POLICY"),

	VISIBILITY: sqlc.NullInt(__space, "VISIBILITY"),

	STATUS: sqlc.Int(__space, "STATUS"),

	TAGS: sqlc.NullString(__space, "TAGS"),

	CREATED_AT: sqlc.NullDatetime(__space, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__space, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__space, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__space, "UPDATED_BY"),

	LDAP_DN: sqlc.NullString(__space, "LDAP_DN"),

	AUTO_ADD_NEW_MEMBERS: sqlc.NullInt(__space, "AUTO_ADD_NEW_MEMBERS"),
}

var __space_membership = &space_membership{}
var SPACE_MEMBERSHIP = &space_membership{

	SPACE_ID: sqlc.Int(__space_membership, "SPACE_ID"),

	USER_ID: sqlc.Int(__space_membership, "USER_ID"),

	ORIGINATOR_USER_ID: sqlc.NullString(__space_membership, "ORIGINATOR_USER_ID"),

	STATUS: sqlc.NullInt(__space_membership, "STATUS"),

	REQUEST_MESSAGE: sqlc.NullString(__space_membership, "REQUEST_MESSAGE"),

	LAST_VISIT: sqlc.NullDatetime(__space_membership, "LAST_VISIT"),

	INVITE_ROLE: sqlc.NullInt(__space_membership, "INVITE_ROLE"),

	ADMIN_ROLE: sqlc.NullInt(__space_membership, "ADMIN_ROLE"),

	SHARE_ROLE: sqlc.NullInt(__space_membership, "SHARE_ROLE"),

	CREATED_AT: sqlc.NullDatetime(__space_membership, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__space_membership, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__space_membership, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__space_membership, "UPDATED_BY"),
}

var __space_module = &space_module{}
var SPACE_MODULE = &space_module{

	ID: sqlc.Int(__space_module, "ID"),

	MODULE_ID: sqlc.String(__space_module, "MODULE_ID"),

	SPACE_ID: sqlc.Int(__space_module, "SPACE_ID"),

	STATE: sqlc.NullInt(__space_module, "STATE"),
}

var __space_setting = &space_setting{}
var SPACE_SETTING = &space_setting{

	ID: sqlc.Int(__space_setting, "ID"),

	SPACE_ID: sqlc.NullInt(__space_setting, "SPACE_ID"),

	MODULE_ID: sqlc.NullString(__space_setting, "MODULE_ID"),

	NAME: sqlc.NullString(__space_setting, "NAME"),

	VALUE: sqlc.NullString(__space_setting, "VALUE"),

	CREATED_AT: sqlc.NullDatetime(__space_setting, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__space_setting, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__space_setting, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__space_setting, "UPDATED_BY"),
}

var __url_oembed = &url_oembed{}
var URL_OEMBED = &url_oembed{

	URL: sqlc.String(__url_oembed, "URL"),

	PREVIEW: sqlc.String(__url_oembed, "PREVIEW"),
}

var __user = &user{}
var USER = &user{

	ID: sqlc.Int(__user, "ID"),

	GUID: sqlc.NullString(__user, "GUID"),

	WALL_ID: sqlc.NullInt(__user, "WALL_ID"),

	GROUP_ID: sqlc.NullInt(__user, "GROUP_ID"),

	STATUS: sqlc.NullInt(__user, "STATUS"),

	SUPER_ADMIN: sqlc.Int(__user, "SUPER_ADMIN"),

	USERNAME: sqlc.NullString(__user, "USERNAME"),

	EMAIL: sqlc.NullString(__user, "EMAIL"),

	AUTH_MODE: sqlc.String(__user, "AUTH_MODE"),

	TAGS: sqlc.NullString(__user, "TAGS"),

	LANGUAGE: sqlc.NullString(__user, "LANGUAGE"),

	LAST_ACTIVITY_EMAIL: sqlc.Datetime(__user, "LAST_ACTIVITY_EMAIL"),

	CREATED_AT: sqlc.NullDatetime(__user, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__user, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__user, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__user, "UPDATED_BY"),

	LAST_LOGIN: sqlc.NullDatetime(__user, "LAST_LOGIN"),
}

var __user_follow = &user_follow{}
var USER_FOLLOW = &user_follow{

	ID: sqlc.Int(__user_follow, "ID"),

	OBJECT_MODEL: sqlc.String(__user_follow, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__user_follow, "OBJECT_ID"),

	USER_ID: sqlc.Int(__user_follow, "USER_ID"),

	SEND_NOTIFICATIONS: sqlc.NullInt(__user_follow, "SEND_NOTIFICATIONS"),
}

var __user_http_session = &user_http_session{}
var USER_HTTP_SESSION = &user_http_session{

	ID: sqlc.String(__user_http_session, "ID"),

	EXPIRE: sqlc.NullInt(__user_http_session, "EXPIRE"),

	USER_ID: sqlc.NullInt(__user_http_session, "USER_ID"),

	DATA: sqlc.NullBlob(__user_http_session, "DATA"),
}

var __user_invite = &user_invite{}
var USER_INVITE = &user_invite{

	ID: sqlc.Int(__user_invite, "ID"),

	USER_ORIGINATOR_ID: sqlc.NullInt(__user_invite, "USER_ORIGINATOR_ID"),

	SPACE_INVITE_ID: sqlc.NullInt(__user_invite, "SPACE_INVITE_ID"),

	EMAIL: sqlc.String(__user_invite, "EMAIL"),

	SOURCE: sqlc.NullString(__user_invite, "SOURCE"),

	TOKEN: sqlc.NullString(__user_invite, "TOKEN"),

	CREATED_AT: sqlc.NullDatetime(__user_invite, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__user_invite, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__user_invite, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__user_invite, "UPDATED_BY"),
}

var __user_mentioning = &user_mentioning{}
var USER_MENTIONING = &user_mentioning{

	ID: sqlc.Int(__user_mentioning, "ID"),

	OBJECT_MODEL: sqlc.String(__user_mentioning, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__user_mentioning, "OBJECT_ID"),

	USER_ID: sqlc.Int(__user_mentioning, "USER_ID"),
}

var __user_module = &user_module{}
var USER_MODULE = &user_module{

	ID: sqlc.Int(__user_module, "ID"),

	MODULE_ID: sqlc.String(__user_module, "MODULE_ID"),

	USER_ID: sqlc.Int(__user_module, "USER_ID"),

	STATE: sqlc.NullInt(__user_module, "STATE"),
}

var __user_password = &user_password{}
var USER_PASSWORD = &user_password{

	ID: sqlc.Int(__user_password, "ID"),

	USER_ID: sqlc.NullInt(__user_password, "USER_ID"),

	ALGORITHM: sqlc.NullString(__user_password, "ALGORITHM"),

	PASSWORD: sqlc.NullString(__user_password, "PASSWORD"),

	SALT: sqlc.NullString(__user_password, "SALT"),

	CREATED_AT: sqlc.NullDatetime(__user_password, "CREATED_AT"),
}

var __user_setting = &user_setting{}
var USER_SETTING = &user_setting{

	ID: sqlc.Int(__user_setting, "ID"),

	USER_ID: sqlc.NullInt(__user_setting, "USER_ID"),

	MODULE_ID: sqlc.NullString(__user_setting, "MODULE_ID"),

	NAME: sqlc.NullString(__user_setting, "NAME"),

	VALUE: sqlc.NullString(__user_setting, "VALUE"),

	CREATED_AT: sqlc.NullDatetime(__user_setting, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__user_setting, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__user_setting, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__user_setting, "UPDATED_BY"),
}

var __wall = &wall{}
var WALL = &wall{

	ID: sqlc.Int(__wall, "ID"),

	TYPE: sqlc.NullString(__wall, "TYPE"),

	OBJECT_MODEL: sqlc.String(__wall, "OBJECT_MODEL"),

	OBJECT_ID: sqlc.Int(__wall, "OBJECT_ID"),

	CREATED_AT: sqlc.NullDatetime(__wall, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__wall, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__wall, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__wall, "UPDATED_BY"),
}

var __wall_entry = &wall_entry{}
var WALL_ENTRY = &wall_entry{

	ID: sqlc.Int(__wall_entry, "ID"),

	WALL_ID: sqlc.Int(__wall_entry, "WALL_ID"),

	CONTENT_ID: sqlc.Int(__wall_entry, "CONTENT_ID"),

	CREATED_AT: sqlc.NullDatetime(__wall_entry, "CREATED_AT"),

	CREATED_BY: sqlc.NullInt(__wall_entry, "CREATED_BY"),

	UPDATED_AT: sqlc.NullDatetime(__wall_entry, "UPDATED_AT"),

	UPDATED_BY: sqlc.NullInt(__wall_entry, "UPDATED_BY"),
}

var TableLikes = []sqlc.TableLike{

	ACTIVITY,

	COMMENT,

	CONTENT,

	FILE,

	GROUP,

	GROUP_ADMIN,

	LIKE,

	LOGGING,

	MIGRATION,

	MODULE_ENABLED,

	NOTIFICATION,

	POST,

	PROFILE,

	PROFILE_FIELD,

	PROFILE_FIELD_CATEGORY,

	SETTING,

	SPACE,

	SPACE_MEMBERSHIP,

	SPACE_MODULE,

	SPACE_SETTING,

	URL_OEMBED,

	USER,

	USER_FOLLOW,

	USER_HTTP_SESSION,

	USER_INVITE,

	USER_MENTIONING,

	USER_MODULE,

	USER_PASSWORD,

	USER_SETTING,

	WALL,

	WALL_ENTRY,
}
